generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id               String     @id @default(cuid())
  title            String
  artist           String
  videoUrl         String?
  description      String?
  lyrics           String?
  isPublic         Boolean    @default(true)
  likeCount        Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  isFirstVerseOnly Boolean    @default(false)
  isHighDifficulty Boolean    @default(false)
  isLoopStation    Boolean    @default(false)
  progress         Int        @default(0)
  videoUrl2        String?
  category         String
  isMr             Boolean    @default(false)
  likes            SongLike[]

  @@index([category])
  @@index([createdAt])
}

model SongLike {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  createdAt DateTime @default(now())
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

model BgmTrack {
  id        String   @id @default(cuid())
  title     String?
  videoUrl  String
  genre     BgmGenre
  duration  Int?
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
  tags      String[] @default([])

  @@index([genre])
  @@index([createdAt])
  @@index([order])
}

model Notice {
  id        Int      @id @default(1)
  content   String
  isVisible Boolean  @default(true)
  updatedAt DateTime @updatedAt
}

model Guestbook {
  id        String   @id @default(cuid())
  author    String
  content   String
  userKey   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VisitorCount {
  date  DateTime @id
  count Int      @default(0)
}

model PinnedGuestbook {
  id          Int      @id @default(autoincrement())
  guestbookId String   @unique
  updatedAt   DateTime @updatedAt
}

model LookBookPost {
  id        String              @id @default(cuid())
  title     String
  content   String
  uploader  String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  images    LookBookPostImage[]
}

model LookBookPostImage {
  id        String       @id @default(cuid())
  imageUrl  String
  postId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     Int          @default(0)
  post      LookBookPost @relation(fields: [postId], references: [id])
}

model PageText {
  id           Int      @id @default(1)
  title        String
  subtitle     String
  howToRequest String
  howToWatch   String
  priceInfo    String
  otherInfo    String
  faq          String
  updatedAt    DateTime
}

enum BgmGenre {
  INST
  K_POP
  J_POP
  POP
  TOPGOL
  ETC
}
